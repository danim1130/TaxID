# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.confidence_value import ConfidenceValue  # noqa: F401,E501
from swagger_server import util


class TaxIdCard(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id_num: str=None, serial_num: str=None, birthdate: ConfidenceValue=None, birthplace: ConfidenceValue=None, name: ConfidenceValue=None, mother_name: ConfidenceValue=None, release_date: ConfidenceValue=None, type: str=None, valid: bool=None):  # noqa: E501
        """TaxIdCard - a model defined in Swagger

        :param id_num: The id_num of this TaxIdCard.  # noqa: E501
        :type id_num: str
        :param serial_num: The serial_num of this TaxIdCard.  # noqa: E501
        :type serial_num: str
        :param birthdate: The birthdate of this TaxIdCard.  # noqa: E501
        :type birthdate: ConfidenceValue
        :param birthplace: The birthplace of this TaxIdCard.  # noqa: E501
        :type birthplace: ConfidenceValue
        :param name: The name of this TaxIdCard.  # noqa: E501
        :type name: ConfidenceValue
        :param mother_name: The mother_name of this TaxIdCard.  # noqa: E501
        :type mother_name: ConfidenceValue
        :param release_date: The release_date of this TaxIdCard.  # noqa: E501
        :type release_date: ConfidenceValue
        :param type: The type of this TaxIdCard.  # noqa: E501
        :type type: str
        :param valid: The valid of this TaxIdCard.  # noqa: E501
        :type valid: bool
        """
        self.swagger_types = {
            'id_num': str,
            'serial_num': str,
            'birthdate': ConfidenceValue,
            'birthplace': ConfidenceValue,
            'name': ConfidenceValue,
            'mother_name': ConfidenceValue,
            'release_date': ConfidenceValue,
            'type': str,
            'valid': bool
        }

        self.attribute_map = {
            'id_num': 'id_num',
            'serial_num': 'serial_num',
            'birthdate': 'birthdate',
            'birthplace': 'birthplace',
            'name': 'name',
            'mother_name': 'mother_name',
            'release_date': 'release_date',
            'type': 'type',
            'valid': 'valid'
        }

        self._id_num = id_num
        self._serial_num = serial_num
        self._birthdate = birthdate
        self._birthplace = birthplace
        self._name = name
        self._mother_name = mother_name
        self._release_date = release_date
        self._type = type
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt) -> 'TaxIdCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaxIdCard of this TaxIdCard.  # noqa: E501
        :rtype: TaxIdCard
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_num(self) -> str:
        """Gets the id_num of this TaxIdCard.

        The identification number of the card  # noqa: E501

        :return: The id_num of this TaxIdCard.
        :rtype: str
        """
        return self._id_num

    @id_num.setter
    def id_num(self, id_num: str):
        """Sets the id_num of this TaxIdCard.

        The identification number of the card  # noqa: E501

        :param id_num: The id_num of this TaxIdCard.
        :type id_num: str
        """
        if id_num is None:
            raise ValueError("Invalid value for `id_num`, must not be `None`")  # noqa: E501

        self._id_num = id_num

    @property
    def serial_num(self) -> str:
        """Gets the serial_num of this TaxIdCard.

        The serial number of the card  # noqa: E501

        :return: The serial_num of this TaxIdCard.
        :rtype: str
        """
        return self._serial_num

    @serial_num.setter
    def serial_num(self, serial_num: str):
        """Sets the serial_num of this TaxIdCard.

        The serial number of the card  # noqa: E501

        :param serial_num: The serial_num of this TaxIdCard.
        :type serial_num: str
        """

        self._serial_num = serial_num

    @property
    def birthdate(self) -> ConfidenceValue:
        """Gets the birthdate of this TaxIdCard.


        :return: The birthdate of this TaxIdCard.
        :rtype: ConfidenceValue
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate: ConfidenceValue):
        """Sets the birthdate of this TaxIdCard.


        :param birthdate: The birthdate of this TaxIdCard.
        :type birthdate: ConfidenceValue
        """
        if birthdate is None:
            raise ValueError("Invalid value for `birthdate`, must not be `None`")  # noqa: E501

        self._birthdate = birthdate

    @property
    def birthplace(self) -> ConfidenceValue:
        """Gets the birthplace of this TaxIdCard.


        :return: The birthplace of this TaxIdCard.
        :rtype: ConfidenceValue
        """
        return self._birthplace

    @birthplace.setter
    def birthplace(self, birthplace: ConfidenceValue):
        """Sets the birthplace of this TaxIdCard.


        :param birthplace: The birthplace of this TaxIdCard.
        :type birthplace: ConfidenceValue
        """
        if birthplace is None:
            raise ValueError("Invalid value for `birthplace`, must not be `None`")  # noqa: E501

        self._birthplace = birthplace

    @property
    def name(self) -> ConfidenceValue:
        """Gets the name of this TaxIdCard.


        :return: The name of this TaxIdCard.
        :rtype: ConfidenceValue
        """
        return self._name

    @name.setter
    def name(self, name: ConfidenceValue):
        """Sets the name of this TaxIdCard.


        :param name: The name of this TaxIdCard.
        :type name: ConfidenceValue
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mother_name(self) -> ConfidenceValue:
        """Gets the mother_name of this TaxIdCard.


        :return: The mother_name of this TaxIdCard.
        :rtype: ConfidenceValue
        """
        return self._mother_name

    @mother_name.setter
    def mother_name(self, mother_name: ConfidenceValue):
        """Sets the mother_name of this TaxIdCard.


        :param mother_name: The mother_name of this TaxIdCard.
        :type mother_name: ConfidenceValue
        """
        if mother_name is None:
            raise ValueError("Invalid value for `mother_name`, must not be `None`")  # noqa: E501

        self._mother_name = mother_name

    @property
    def release_date(self) -> ConfidenceValue:
        """Gets the release_date of this TaxIdCard.


        :return: The release_date of this TaxIdCard.
        :rtype: ConfidenceValue
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date: ConfidenceValue):
        """Sets the release_date of this TaxIdCard.


        :param release_date: The release_date of this TaxIdCard.
        :type release_date: ConfidenceValue
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")  # noqa: E501

        self._release_date = release_date

    @property
    def type(self) -> str:
        """Gets the type of this TaxIdCard.

        The type of the id card (either NEW_CARD, OLD_CARD, or UNKNOWN)  # noqa: E501

        :return: The type of this TaxIdCard.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TaxIdCard.

        The type of the id card (either NEW_CARD, OLD_CARD, or UNKNOWN)  # noqa: E501

        :param type: The type of this TaxIdCard.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def valid(self) -> bool:
        """Gets the valid of this TaxIdCard.

        Is the identified card number valid.  # noqa: E501

        :return: The valid of this TaxIdCard.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid: bool):
        """Sets the valid of this TaxIdCard.

        Is the identified card number valid.  # noqa: E501

        :param valid: The valid of this TaxIdCard.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")  # noqa: E501

        self._valid = valid
